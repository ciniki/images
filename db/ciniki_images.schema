#
# Description
# -----------
# The images table stores references to images that are used by other modules.  The images can be stored on
# local disk as uploaded by the user, or on another hosted service like flickr.  The advantage to images
# being on flickr is very fast load times, the flickr image farm is worldwide and loads from the closest.
#
# The images stored in this table can be linked or attached to a tenant and/or a user.  It depends
# how and where the image was uploaded, determines how it is linked.  If the photo is uploaded by a 
# user as their profile pic, then it should only be linked to the user, and the tnid should be 0.
#
# If the photo was uploaded through the media section of ciniki-monage, then it should be attached to both
# the user who uploaded the photo, and the tenant the photo was uploaded into.
#
# A photo could be added only linked to a tenant with user_id = 0, and that would give any 
# owner or media manager in that tenant the right to edit/delete that photo.
#
# The binary image data is stored in the database to make it easier to transfer tenant information
# from one server to another, without having to transfer files from disk.
#
# Images should only be stored once in the database, and referenced by the image_id multiple times if
# different modules are using the same image.  This helps keep the database size to a minimum.  The checksum 
# field keeps a records of crc32 checksums to make sure images are unique.
#
# Fields
# ------
# id:                   The unique ID of the image.
# uuid:                 The Universal Unique ID for the image.
# tnid:                 The tenant the photo is attached to.  A profile pic for a user 
#                       should not be attached to the tenant, it should only be attached
#                       to a user through user_id.
#
# user_id:              If a customer uploaded the photo, then it should be
#                       attached to the user, so they have privileges on the photo.
#                       If the photo is owned by the tenant, then the user_id = 0. 
#
# perms:                Assume private to user_id, and tenant owner.
#
#                       *note* future use only, not currently implemented.  All images default to 1 - public.
#
#                       0x01 - public, can display on website, feeds, etc
#                       0x02 - customer, customers can see this.
#                       0x04 - employees
#                       0x08 - unused
#
# type:                 The type can be a local uploaded image, or an images which
#                       is hosted elsewhere.  Currently, the only one supported
#                       will be local png and local jpeg.
#
#                       0 - unknown
#                       1 - local png
#                       2 - local jpeg
#                       3 - local gif *future*
#                       4 - local tiff *future*
#                       5 - local bmp *future*
#                       6 - local svg 
#                       7 - local webp
#                       128 - flickr *future
#                       129 - smugmug *future
#                       130 - picassa *future
#                       131 - 
#
# original_filename:    The original filename the image was uploaded with.  May be blank if 
#                       taken directly with camera on mobile or other device.
#
# remote_id:            The id at the remote side, if stored at a place like flickr.
#
# title:                The title or filename assigned to the image.
#
# caption:              The caption for the image.
#
# image:                The binary image data in imageMagick format ($image->getImageBlob()).
#
# checksum:             The crc32 checksum for the image.  This field is used to make sure
#                       duplicate images are not stored in the database.
#
# date_added:           The date and time the image was added to the database.
# last_updated:         The date and time the image was last updated.
#
create table ciniki_images (
    id int not null auto_increment,
    uuid char(36) not null,
    tnid int not null,
    user_id int not null,
    perms tinyint unsigned not null,
    type tinyint unsigned not null,
    original_filename varchar(150) not null,
    remote_id varchar(50) not null,
    title varchar(100) not null,
    caption varchar(500) not null,
    image mediumblob,
    checksum int unsigned not null,
    date_added datetime not null,
    last_updated datetime not null,
    primary key (id),
    index (tnid, user_id),
    index (remote_id),
    index uuid (tnid, uuid, last_updated)
) ENGINE=InnoDB, COMMENT='v1.04';
